generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  googleId       String?          @unique // Optional, only for students with Google IDs
  name           String?          @default("NO_NAME")
  username       String?
  email          String?          @unique(map: "user_email_idx")
  emailVerified  DateTime?        @db.Timestamp(6)
  image          String?
  password       String? // this password is only for student accounts and needs to be accessible to teacher
  iv             String? // this is used to encrypt student names, ensures no duplicates when same input is given
  sessions       Session[]
  accounts       Account[]
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt
  comments       Comment[]
  responseLikes  ResponseLike[]
  commentLikes   CommentLike[]
  responses      Response[]
  notifications  Notification[]
  classes        ClassUser[]
  prompts        Prompt[] // Prompts are for teachers
  PromptCategory PromptCategory[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @default(now()) @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Classroom {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  classCode     String          @unique @db.VarChar(8)
  color         String
  subject       String?
  year          String?         @db.VarChar(12)
  period        String?
  users         ClassUser[] // Many-to-many relationship(can be a teacher role or student rol)
  prompts       Prompt[]        @relation("PromptClass")
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp(6)
  PromptSession PromptSession[]
}

model ClassUser {
  userId  String    @db.Uuid
  classId String    @db.Uuid
  role    String    @default("student") // "teacher" or "student"
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Classroom @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([userId, classId]) // Composite primary key
}

model Notification {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid
  responseId  String   @db.Uuid
  url         String
  message     String
  commentText String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  response    Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
}

model Comment {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String        @db.VarChar(1000)
  likeCount  Int           @default(0)
  likes      CommentLike[]
  createdAt  DateTime      @default(now())
  userId     String        @db.Uuid
  responseId String        @db.Uuid
  parentId   String?       @db.Uuid // Null for top-level comments; set for replies
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  response   Response      @relation(fields: [responseId], references: [id], onDelete: Cascade)
  parent     Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]     @relation("CommentReplies")

  @@index([parentId]) // Optional: Improves performance when querying replies
}

model ResponseLike {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  responseId String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, responseId]) // Ensure a user can like a response only once
}

model CommentLike {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String  @db.Uuid
  commentId String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId]) // Ensure a user can like a resoponse only once
}

model Prompt {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  teacherId     String          @db.Uuid
  promptType    String // "single-question" or "multi-question"
  teacher       User            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  questions     Json
  classes       Classroom[]     @relation("PromptClass") // this is for prompt organization
  promptSession PromptSession[]
  categoryId    String?         @db.Uuid
  category      PromptCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull) // Each prompt has one category
}

model PromptCategory {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  userId  String   @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts Prompt[]
}

model PromptSession {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptId   String?    @db.Uuid
  title      String
  questions  Json // Single array of question objects
  promptType String // single-question or multi-question
  assignedAt DateTime   @default(now())
  classId    String     @db.Uuid // relate it to which side it is attached to
  status     String     @default("open") // e.g., "open", "closed"
  responses  Response[]
  // Relationship
  prompt     Prompt?    @relation(fields: [promptId], references: [id], onDelete: SetNull)
  class      Classroom  @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Response {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptSessionId String         @db.Uuid
  studentId       String         @db.Uuid
  response        Json //stores questions, answers, and score (score is Correct, 1/2 or wrong)
  submittedAt     DateTime // Nullable in case they haven't submitted yet
  likeCount       Int            @default(0)
  likes           ResponseLike[]
  notifications   Notification[]
  comments        Comment[]
  // Relationship
  promptSession   PromptSession  @relation(fields: [promptSessionId], references: [id], onDelete: Cascade)
  student         User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
}
